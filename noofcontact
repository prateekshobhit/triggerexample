trigger noofcontact on Contact (after insert, after update, after delete, after undelete) {
    //---&gt; above handling all states which could see a contact added to or removed from an account

//---&gt; on delete we use Trigger.Old, all else, Trigger.new
List<contact> contacts = Trigger.isDelete ? Trigger.old : Trigger.new;

//---&gt; the Set class rocks for finding the unique values in a list
Set<id> acctIds = new Set<id>();

for (Contact c : contacts) {
    //yes, you can have a contact without an account
    if (c.AccountId != null) {
        acctIds.add(c.AccountId);
    }
}

List<account> acctsToRollup = new List<account>();

//****** Here is the Aggregate query...don't count in loops, let the DB do it for you*****
for (AggregateResult ar : [SELECT AccountId AcctId, Count(id) ContactCount 
                            FROM Contact 
                            WHERE AccountId in: acctIds 
                            GROUP BY AccountId]){
    Account a = new Account();
    a.Id = (Id) ar.get('AcctId'); //---&gt; handy trick for updates, set the id and update
    a.No_of_Contact__c = (Integer) ar.get('ContactCount');
    acctsToRollup.add(a);
}

//----&gt; probably you'll want to do a little more error handling than this...but this should work. 
update acctsToRollup;
}
